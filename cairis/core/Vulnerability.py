# -*- coding: utf-8 -*-
#  Licensed to the Apache Software Foundation (ASF) under one
#  or more contributor license agreements.  See the NOTICE file
#  distributed with this work for additional information
#  regarding copyright ownership.  The ASF licenses this file
#  to you under the Apache License, Version 2.0 (the
#  "License"); you may not use this file except in compliance
#  with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.

__author__ = "Shamal Faily"

from . import ObjectValidator


class Vulnerability(ObjectValidator.ObjectValidator):
    def __init__(self, vulId, vulName, vulDesc, vulType, tags, cProps):
        ObjectValidator.ObjectValidator.__init__(self)
        self.theVulnerabilityId = vulId
        self.theName = vulName
        self.theDescription = vulDesc
        self.theType = vulType
        self.theTags = tags
        self.theEnvironmentProperties = cProps
        self.theEnvironmentDictionary = {}
        for p in self.theEnvironmentProperties:
            environmentName = p.name()
            self.theEnvironmentDictionary[environmentName] = p
        self.severityLookup = {}
        self.severityLookup["Negligible"] = 0
        self.severityLookup["Marginal"] = 1
        self.severityLookup["Critical"] = 2
        self.severityLookup["Catastrophic"] = 3

    def id(self):
        return self.theVulnerabilityId

    def name(self):
        return self.theName

    def type(self):
        return self.theType

    def description(self):
        return self.theDescription

    def tags(self):
        return self.theTags

    def environmentProperties(self):
        return self.theEnvironmentProperties

    def severity(self, environmentName, dupProperty="", overridingEnvironment=""):
        if (dupProperty == "") or (dupProperty == "None"):
            return (self.theEnvironmentDictionary[environmentName]).severity()
        else:
            workingSeverity = "Negligible"
            for p in self.theEnvironmentProperties:
                environmentName = p.name()
                currentSeverity = p.severity()
                if dupProperty == "Override":
                    if environmentName != overridingEnvironment:
                        continue
                    else:
                        workingSeverity = currentSeverity
                else:
                    if (
                        self.severityLookup[currentSeverity]
                        > self.severityLookup[workingSeverity]
                    ):
                        workingSeverity = currentSeverity
            return workingSeverity

    def assets(self, environmentName, dupProperty):
        if dupProperty == "":
            return (self.theEnvironmentDictionary[environmentName]).assets()
        else:
            mergedAssets = []
            for p in self.theEnvironmentProperties:
                mergedAssets += p.assets()
            return set(mergedAssets)
